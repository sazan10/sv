name: sv

on:
  push:
jobs:
  run-tsan:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2 

      - name: Install dependencies for project (Linux)
        if: runner.os == 'Linux'
        run: | 
          sudo apt-get update
          sudo apt-get install -y autotools-dev automake libevent-dev
          
      - name: Install ThreadSanitizer dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y clang-14 libclang-14-dev llvm-14 llvm-14-dev llvm-14-tools llvm-14-linker-tools

      - name: Compile codes 
        run: |
          git clone https://gitlab.com/sosy-lab/benchmarking/sv-benchmarks.git
          cd sv-benchmarks/c
          mkdir -p memorysan_logs
          find . -type f -name "*.c" | while read -r cfile; do
            filename=$(basename "$cfile" .c)
              dirname=$(dirname "$cfile" ) 
              clang -fsanitize=memory -fsanitize-memory-track-origins -fPIE -fPIC -g -O2 $cfile -o "$dirname/$filename"
              echo
          done

          is_executable() {
            local file="$1"
            if file "$file" | grep -q 'ELF 64-bit'; then
              return 0
            else
              return 1
            fi
          }
          run_with_asan() {
            local executable="$1"
            MSAN_OPTIONS="exitcode=1 verbosity=1 halt_on_error=1 print_stats=1 log_path=./memorysan_logs/$(basename "$executable").txt" "$executable"
            local exit_status=$?
          }
          find . -type f -executable | while read -r file; do
            if is_executable "$file"; then
              run_with_asan "$file"
            fi
          done
